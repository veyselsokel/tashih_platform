# docker-compose.yml

version: '3.8' # Docker Compose sürümü

services:
  # -----------------------------------------
  # PHP Servisi (Laravel Uygulamanız)
  # -----------------------------------------
  app:
    # Build ayarları: Projedeki Dockerfile'ı kullanarak imaj oluşturacak
    build:
      context: .           # Dockerfile'ın bulunduğu dizin (proje ana dizini)
      dockerfile: Dockerfile # Kullanılacak Dockerfile'ın adı
    container_name: tashih_app # Konteynere verilecek isim
    restart: unless-stopped    # Konteyner durursa veya Pi yeniden başlarsa otomatik başlat
    working_dir: /var/www/html # Konteyner içindeki çalışma dizini

    # Volume'lar: Yerel dosyaları konteynere bağlar
    volumes:
      # Proje kodunu konteyner içindeki /var/www/html dizinine bağla
      # Kodda değişiklik yaptığınızda konteyneri yeniden build etmeniz gerekmez
      - ./:/var/www/html

    # Ağ Ayarları
    networks:
      # Bu servisleri birbirine bağlamak için oluşturduğumuz ağ
      - tashih_network
      - mariadb_default

      # --- OPSİYONEL ---
      # Eğer aşağıdaki adımlarda 'mariadb' ismine ulaşılamazsa,
      # MariaDB'nin bulunduğu CasaOS ağını (genellikle 'casaos' olur)
      # buraya eklemek gerekebilir. Şimdilik kapalı kalsın.
      # - casaos

    # Ortam Değişkenleri (Environment Variables)
    # Bunları burada tanımlayabiliriz VEYA konteyner içine girip .env dosyasında
    # ayarlayabiliriz (Laravel için .env genellikle tercih edilir).
    # Şimdilik burada yorumlu bırakalım:
    # environment:
    #   - DB_HOST=mariadb
    #   - DB_PORT=3306
    #   - DB_DATABASE=tashih_platform
    #   - DB_USERNAME=tashih_user
    #   - DB_PASSWORD=8524_Veysel # .env dosyasında kullanacağınız parola
    #   - APP_ENV=production
    #   - APP_DEBUG=false

  # -----------------------------------------
  # Nginx Servisi (Web Sunucusu)
  # -----------------------------------------
  web:
    image: nginx:alpine # Hazır Nginx imajını kullan (küçük boyutlu alpine sürümü)
    container_name: tashih_web # Konteynere verilecek isim
    restart: unless-stopped    # Otomatik yeniden başlatma ayarı
    ports:
      # Pi'nin 8080 portunu Nginx konteynerinin 80 portuna yönlendir.
      # Sitenize http://<PI_IP_ADRESINIZ>:8080 adresinden erişeceksiniz.
      # Eğer Pi'nizin 80 portu boşta ise, bunu "80:80" olarak değiştirebilirsiniz.
      - "8080:80"
      # HTTPS için daha sonra 443 portunu da ekleyeceğiz.

    # Volume'lar
    volumes:
      # Proje kodunu bağla (Nginx'in public klasöründeki statik dosyalara erişmesi gerekir)
      - ./:/var/www/html
      # Projedeki Nginx konfigürasyon dosyasını konteyner içine bağla (read-only)
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro

    # Ağ Ayarları
    networks:
      # PHP servisi ile aynı ağa bağla
      - tashih_network

    # Bağımlılıklar (İsteğe Bağlı)
    depends_on:
      # 'app' servisinin başlamasını bekler (tamamen hazır olmasını garantilemez)
      - app

# -----------------------------------------
# Ağ Tanımlamaları
# -----------------------------------------
networks:
  tashih_network:
    driver: bridge
  # --- BU BÖLÜMÜ GÜNCELLEYİN/EKLEYİN ---
  mariadb_default: # Bulduğumuz ağ adını kullanıyoruz
    external: true # Bu ağın zaten var olduğunu belirtir
  # --- OPSİYONEL ---
  # Eğer MariaDB'ye 'mariadb' ismiyle ulaşılamazsa, CasaOS'un varsayılan
  # ağını buraya ekleyip 'app' servisini ona bağlamak gerekebilir.
  # casaos:
  #   external: true # Bu ağın CasaOS tarafından zaten oluşturulduğunu varsayar
